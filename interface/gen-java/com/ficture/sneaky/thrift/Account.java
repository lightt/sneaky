/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.ficture.sneaky.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Account implements org.apache.thrift.TBase<Account, Account._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Account");

  private static final org.apache.thrift.protocol.TField SERVICE_KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("service_kind", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField ASSOCIATED_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("associated_user", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.MAP, (short)6);

  public String service_kind;
  public String handle;
  public Map<String,ByteBuffer> attrs;
  public User associated_user;
  public User owner;
  public Map<String,ByteBuffer> credentials;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_KIND((short)1, "service_kind"),
    HANDLE((short)2, "handle"),
    ATTRS((short)3, "attrs"),
    ASSOCIATED_USER((short)4, "associated_user"),
    OWNER((short)5, "owner"),
    CREDENTIALS((short)6, "credentials");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_KIND
          return SERVICE_KIND;
        case 2: // HANDLE
          return HANDLE;
        case 3: // ATTRS
          return ATTRS;
        case 4: // ASSOCIATED_USER
          return ASSOCIATED_USER;
        case 5: // OWNER
          return OWNER;
        case 6: // CREDENTIALS
          return CREDENTIALS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_KIND, new org.apache.thrift.meta_data.FieldMetaData("service_kind", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.ASSOCIATED_USER, new org.apache.thrift.meta_data.FieldMetaData("associated_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Account.class, metaDataMap);
  }

  public Account() {
  }

  public Account(
    String service_kind,
    String handle,
    Map<String,ByteBuffer> attrs)
  {
    this();
    this.service_kind = service_kind;
    this.handle = handle;
    this.attrs = attrs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Account(Account other) {
    if (other.isSetService_kind()) {
      this.service_kind = other.service_kind;
    }
    if (other.isSetHandle()) {
      this.handle = other.handle;
    }
    if (other.isSetAttrs()) {
      Map<String,ByteBuffer> __this__attrs = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.attrs.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__attrs_copy_key = other_element_key;

        ByteBuffer __this__attrs_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__attrs.put(__this__attrs_copy_key, __this__attrs_copy_value);
      }
      this.attrs = __this__attrs;
    }
    if (other.isSetAssociated_user()) {
      this.associated_user = new User(other.associated_user);
    }
    if (other.isSetOwner()) {
      this.owner = new User(other.owner);
    }
    if (other.isSetCredentials()) {
      Map<String,ByteBuffer> __this__credentials = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.credentials.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__credentials_copy_key = other_element_key;

        ByteBuffer __this__credentials_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__credentials.put(__this__credentials_copy_key, __this__credentials_copy_value);
      }
      this.credentials = __this__credentials;
    }
  }

  public Account deepCopy() {
    return new Account(this);
  }

  @Override
  public void clear() {
    this.service_kind = null;
    this.handle = null;
    this.attrs = null;
    this.associated_user = null;
    this.owner = null;
    this.credentials = null;
  }

  public String getService_kind() {
    return this.service_kind;
  }

  public Account setService_kind(String service_kind) {
    this.service_kind = service_kind;
    return this;
  }

  public void unsetService_kind() {
    this.service_kind = null;
  }

  /** Returns true if field service_kind is set (has been assigned a value) and false otherwise */
  public boolean isSetService_kind() {
    return this.service_kind != null;
  }

  public void setService_kindIsSet(boolean value) {
    if (!value) {
      this.service_kind = null;
    }
  }

  public String getHandle() {
    return this.handle;
  }

  public Account setHandle(String handle) {
    this.handle = handle;
    return this;
  }

  public void unsetHandle() {
    this.handle = null;
  }

  /** Returns true if field handle is set (has been assigned a value) and false otherwise */
  public boolean isSetHandle() {
    return this.handle != null;
  }

  public void setHandleIsSet(boolean value) {
    if (!value) {
      this.handle = null;
    }
  }

  public int getAttrsSize() {
    return (this.attrs == null) ? 0 : this.attrs.size();
  }

  public void putToAttrs(String key, ByteBuffer val) {
    if (this.attrs == null) {
      this.attrs = new HashMap<String,ByteBuffer>();
    }
    this.attrs.put(key, val);
  }

  public Map<String,ByteBuffer> getAttrs() {
    return this.attrs;
  }

  public Account setAttrs(Map<String,ByteBuffer> attrs) {
    this.attrs = attrs;
    return this;
  }

  public void unsetAttrs() {
    this.attrs = null;
  }

  /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrs() {
    return this.attrs != null;
  }

  public void setAttrsIsSet(boolean value) {
    if (!value) {
      this.attrs = null;
    }
  }

  public User getAssociated_user() {
    return this.associated_user;
  }

  public Account setAssociated_user(User associated_user) {
    this.associated_user = associated_user;
    return this;
  }

  public void unsetAssociated_user() {
    this.associated_user = null;
  }

  /** Returns true if field associated_user is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociated_user() {
    return this.associated_user != null;
  }

  public void setAssociated_userIsSet(boolean value) {
    if (!value) {
      this.associated_user = null;
    }
  }

  public User getOwner() {
    return this.owner;
  }

  public Account setOwner(User owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getCredentialsSize() {
    return (this.credentials == null) ? 0 : this.credentials.size();
  }

  public void putToCredentials(String key, ByteBuffer val) {
    if (this.credentials == null) {
      this.credentials = new HashMap<String,ByteBuffer>();
    }
    this.credentials.put(key, val);
  }

  public Map<String,ByteBuffer> getCredentials() {
    return this.credentials;
  }

  public Account setCredentials(Map<String,ByteBuffer> credentials) {
    this.credentials = credentials;
    return this;
  }

  public void unsetCredentials() {
    this.credentials = null;
  }

  /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
  public boolean isSetCredentials() {
    return this.credentials != null;
  }

  public void setCredentialsIsSet(boolean value) {
    if (!value) {
      this.credentials = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_KIND:
      if (value == null) {
        unsetService_kind();
      } else {
        setService_kind((String)value);
      }
      break;

    case HANDLE:
      if (value == null) {
        unsetHandle();
      } else {
        setHandle((String)value);
      }
      break;

    case ATTRS:
      if (value == null) {
        unsetAttrs();
      } else {
        setAttrs((Map<String,ByteBuffer>)value);
      }
      break;

    case ASSOCIATED_USER:
      if (value == null) {
        unsetAssociated_user();
      } else {
        setAssociated_user((User)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((User)value);
      }
      break;

    case CREDENTIALS:
      if (value == null) {
        unsetCredentials();
      } else {
        setCredentials((Map<String,ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_KIND:
      return getService_kind();

    case HANDLE:
      return getHandle();

    case ATTRS:
      return getAttrs();

    case ASSOCIATED_USER:
      return getAssociated_user();

    case OWNER:
      return getOwner();

    case CREDENTIALS:
      return getCredentials();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_KIND:
      return isSetService_kind();
    case HANDLE:
      return isSetHandle();
    case ATTRS:
      return isSetAttrs();
    case ASSOCIATED_USER:
      return isSetAssociated_user();
    case OWNER:
      return isSetOwner();
    case CREDENTIALS:
      return isSetCredentials();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Account)
      return this.equals((Account)that);
    return false;
  }

  public boolean equals(Account that) {
    if (that == null)
      return false;

    boolean this_present_service_kind = true && this.isSetService_kind();
    boolean that_present_service_kind = true && that.isSetService_kind();
    if (this_present_service_kind || that_present_service_kind) {
      if (!(this_present_service_kind && that_present_service_kind))
        return false;
      if (!this.service_kind.equals(that.service_kind))
        return false;
    }

    boolean this_present_handle = true && this.isSetHandle();
    boolean that_present_handle = true && that.isSetHandle();
    if (this_present_handle || that_present_handle) {
      if (!(this_present_handle && that_present_handle))
        return false;
      if (!this.handle.equals(that.handle))
        return false;
    }

    boolean this_present_attrs = true && this.isSetAttrs();
    boolean that_present_attrs = true && that.isSetAttrs();
    if (this_present_attrs || that_present_attrs) {
      if (!(this_present_attrs && that_present_attrs))
        return false;
      if (!this.attrs.equals(that.attrs))
        return false;
    }

    boolean this_present_associated_user = true && this.isSetAssociated_user();
    boolean that_present_associated_user = true && that.isSetAssociated_user();
    if (this_present_associated_user || that_present_associated_user) {
      if (!(this_present_associated_user && that_present_associated_user))
        return false;
      if (!this.associated_user.equals(that.associated_user))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_credentials = true && this.isSetCredentials();
    boolean that_present_credentials = true && that.isSetCredentials();
    if (this_present_credentials || that_present_credentials) {
      if (!(this_present_credentials && that_present_credentials))
        return false;
      if (!this.credentials.equals(that.credentials))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Account typedOther = (Account)other;

    lastComparison = Boolean.valueOf(isSetService_kind()).compareTo(typedOther.isSetService_kind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_kind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_kind, typedOther.service_kind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandle()).compareTo(typedOther.isSetHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, typedOther.handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttrs()).compareTo(typedOther.isSetAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, typedOther.attrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociated_user()).compareTo(typedOther.isSetAssociated_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociated_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associated_user, typedOther.associated_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredentials()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, typedOther.credentials);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SERVICE_KIND
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.service_kind = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HANDLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.handle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ATTRS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
              this.attrs = new HashMap<String,ByteBuffer>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                ByteBuffer _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readBinary();
                this.attrs.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ASSOCIATED_USER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.associated_user = new User();
            this.associated_user.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // OWNER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.owner = new User();
            this.owner.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREDENTIALS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
              this.credentials = new HashMap<String,ByteBuffer>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                String _key6;
                ByteBuffer _val7;
                _key6 = iprot.readString();
                _val7 = iprot.readBinary();
                this.credentials.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.service_kind != null) {
      oprot.writeFieldBegin(SERVICE_KIND_FIELD_DESC);
      oprot.writeString(this.service_kind);
      oprot.writeFieldEnd();
    }
    if (this.handle != null) {
      oprot.writeFieldBegin(HANDLE_FIELD_DESC);
      oprot.writeString(this.handle);
      oprot.writeFieldEnd();
    }
    if (this.attrs != null) {
      oprot.writeFieldBegin(ATTRS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.attrs.size()));
        for (Map.Entry<String, ByteBuffer> _iter8 : this.attrs.entrySet())
        {
          oprot.writeString(_iter8.getKey());
          oprot.writeBinary(_iter8.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.associated_user != null) {
      if (isSetAssociated_user()) {
        oprot.writeFieldBegin(ASSOCIATED_USER_FIELD_DESC);
        this.associated_user.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.owner != null) {
      if (isSetOwner()) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        this.owner.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.credentials != null) {
      if (isSetCredentials()) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.credentials.size()));
          for (Map.Entry<String, ByteBuffer> _iter9 : this.credentials.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeBinary(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Account(");
    boolean first = true;

    sb.append("service_kind:");
    if (this.service_kind == null) {
      sb.append("null");
    } else {
      sb.append(this.service_kind);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handle:");
    if (this.handle == null) {
      sb.append("null");
    } else {
      sb.append(this.handle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attrs:");
    if (this.attrs == null) {
      sb.append("null");
    } else {
      sb.append(this.attrs);
    }
    first = false;
    if (isSetAssociated_user()) {
      if (!first) sb.append(", ");
      sb.append("associated_user:");
      if (this.associated_user == null) {
        sb.append("null");
      } else {
        sb.append(this.associated_user);
      }
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetCredentials()) {
      if (!first) sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (service_kind == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'service_kind' was not present! Struct: " + toString());
    }
    if (handle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'handle' was not present! Struct: " + toString());
    }
    if (attrs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'attrs' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

